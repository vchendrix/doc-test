openapi: 3.0.0
info:
  title: ESS-DIVE Package Service
  version: v0.1.0-30-g9da483e-dirty
  description: |-
    <center> ![essdive](http://ess-dive.lbl.gov/wp-content/themes/ess-dive/images/ess-dive-site-title-logo.png) </center>

    The ESS-DIVE Package Service is a more general interface than the ESS-DIVE repository. Via the service, organizations can write code to store data packages and then re-use the code to upload other data packages in the same or different repositories.

    This is an API service release for submitting data package *metadata* and *data files* to ESS-DIVE. Use this API to submit your ESS-DIVE JSON-LDs. You will be able to use the API for the following:
    * **_Submit your data packages files_**\
      You can upload a data packages (metadata + files) with a total size of 1 GB.
    * **_Submit your JSON-LD schemas_**\
      The ESS-DIVE JSON-LD accepts a restricted subset of properites defined by [Schema.org/Dataset](http://schema.org/Dataset). *(For a detailed overview  review the [ESS-DIVE JSON-LD Schema Proposal](https://docs.google.com/document/d/1mJPchjmzlOwWykPgSLmw3SHwAOAESvHKfKNsQDlTjFY ) )*
    * **_Get a list of data packages submitted by you_**
    * **_Search for a single data package submitted by you_**


    This documentation details the ESS-DIVE Package Service API.

    It is structured as follows:

    * **Package service endpoints:** The section labeled "default" contains documentation for the accepted HTTP operations. You can learn about each request's expected parameters by clicking on the request URL and read the description below each URL.

    * **JSON Models:**
    The last section lists all of the JSON models used in this API. Click on "Models" to expand for more detail

    * **Tutorials:** We also provide [code examples](http://bit.ly/essdive-pstutorial) in three languages (Python, R Java). Click [here](http://bit.ly/essdive-pstutorial) to access the latest version.

    ## About
    ---

  termsOfService: 'https://ess-dive.lbl.gov/about/terms/'
  contact:
    name: ESS-DIVE
    url: 'http://ess-dive.lbl.gov'
    email: ess-dive-support@lbl.gov
paths:
  '/packages/{identifier}':
    get:
      summary: Get a data package by its identifier
      description: Get a data package that you have permissions to edit
      operationId: getPackage
      parameters:
        - in: path
          name: identifier
          description: 'the ESS-DIVE unique identifier (e.g ess-dive-XXXXXXX-2018..., doi:10.xxxx/xxxxx)'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List a Single data package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedAccess'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /packages:
    get:
      summary: List data packages
      description: List all of the data packages that you have permissions to edit.
      operationId: listPackages
      parameters:
        - in: query
          name: page_size
          description: The number of data packages to return per request.
          schema:
            type: integer
            default: 25
        - in: query
          name: row_start
          description: The row number to start on . Use this for paging results
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: lists the data packages submitted by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackagesResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedAccess'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a data package
      description: Create a new JSON-LD representation of a data package with data files (optional).
      operationId: create
      responses:
        '201':
          $ref: '#/components/responses/PackageCreate'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '401':
          $ref: '#/components/responses/UnauthorizedAccess'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        description: |-
          <Left>
          This describes how to create a new data packages.  The metadata is a JSON-LD representation of a data package.

          # Metadata + files
          Submitting both the metadata and files in the form of an array of key and value pairs.

          ---
          **content-type**: multipart/form-data
          ```
          [
            ('json-ld': <json-ld in a string format>),
            ('data': <file binary>),
            ('data': <file binary>)
          ]
          ```
          ### Languages examples:

          #### Python
          ```
            response = requests.request("POST", testing_url, headers=headers,
                              files=[
                                      ("json-ld", str(jsonlds_files["correct_package"])),
                                      ("data", open(file_directory, 'rb'))
                                    ]
                                  )
          ```
          #### Java
          ```
            MultipartEntity reqEntity = new MultipartEntity();

            reqEntity.addPart("json-ld", jsonld); # jsonld object should be a string
            reqEntity.addPart("data", filebinary); # filebinary should be in filebody format

            httppost.setEntity(reqEntity);

            HttpResponse response = httpclient.execute(httppost);
          ```
          # Metadata ONLY
          Submitting the metadata JSON-LD as a body parameter in the request


          ---
          **content-type**: application/json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
          multipart/form-data:
            schema:
              example:
                json-ld:
                  name: A title
                data: /path/to/file.txt
              properties:
                json-ld:
                  $ref: '#/components/schemas/Dataset'
                data:
                  type: string
                  format: binary
    put:
      summary: Update a data package
      description: Update a JSON-LD representation of a data package with data files (optional).
      operationId: update
      responses:
        '201':
          $ref: '#/components/responses/PackageCreate'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '401':
          $ref: '#/components/responses/UnauthorizedAccess'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        description: |-
          <Left>
          This describes how to update a data package. The metadata is a JSON-LD representation of a data package.

          **Update Behavior**
          * **Add new data files:** If a data file is uploaded with a filename that *does not exist* in the data package, it is appended.
          * **Update existing files:** If a data file is uploaded with a filename that *exists* in the data package, it is replaced.
          * **Update metadata:**  Any metadata present in the JSON-LD will *replace* existing metadata.

          # Metadata + files
          Submitting both the metadata and files in the form of an array of key and value pairs.

          ---
          **content-type**: multipart/form-data
          ```
          [
            ('json-ld': <json-ld in a string format>),
            ('data': <file binary>),
            ('data': <file binary>)
          ]
          ```
          ### Languages examples:

          #### Python
          ```
            response = requests.request("POST", testing_url, headers=headers,
                              files=[
                                      ("json-ld", str(jsonlds_files["correct_package"])),
                                      ("data", open(file_directory, 'rb'))
                                    ]
                                  )
          ```
          #### Java
          ```
            MultipartEntity reqEntity = new MultipartEntity();

            reqEntity.addPart("json-ld", jsonld); # jsonld object should be a string
            reqEntity.addPart("data", filebinary); # filebinary should be in filebody format

            httppost.setEntity(reqEntity);

            HttpResponse response = httpclient.execute(httppost);
          ```
          # Metadata ONLY
          Submitting the metadata JSON-LD as a body parameter in the request


          ---
          **content-type**: application/json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
          multipart/form-data:
            schema:
              example:
                json-ld:
                  name: A title
                data: /path/to/file.txt
              properties:
                json-ld:
                  $ref: '#/components/schemas/Dataset'
                data:
                  type: string
                  format: binary
components:
  schemas:
    Dataset:
      $ref: https://api.ess-dive.lbl.gov/dataset.json
    DatasetBrief:
      type: object
      description: Some identifying metadata.  This is a subset of what has been submitted.
      properties:
        '@context':
          type: string
          description: 'This will always be set to http://schema.org'
        '@type':
          type: string
          description: This will always be set to Dataset
        '@id':
          type: string
          description: The public identifier of this dataset; typically a DOI (Digital Object Identifier)
        name:
          type: string
          description: A brief but meaningful title for the data package
        description:
          type: string
          description: A concise description of the purpose and content of this data package.
        datePublished:
          type: string
          description: The year that this data package was published
      example:
        '@context': 'http://schema.org/'
        '@type': Dataset
        '@id': ess-dive-6716346e67a8335-20181214T112531472679
        name: 'FRAMES Metadata Reporting Templates for Ecohydrological Observations, version 1.1'
        description: 'FRAMES is a a set of Excel metadata files and package-level descriptive metadata that are designed to facilitate and improve capture of desired metadata for ecohydrological observations. The metadata are bundled with data files into a data package and submitted to a data repository (e.g. the NGEE Tropics Data Repository) via a web form. FRAMES standardizes reporting of diverse ecohydrological and biogeochemical data for synthesis across a range of spatiotemporal scales and incorporates many best data science practices. This version of FRAMES supports observations for primarily automated measurements collected by permanently located sensors, including sap flow (tree water use), leaf surface temperature, soil water content, dendrometry (stem diameter growth increment), and solar radiation. Version 1.1 extend the controlled vocabulary and incorporates functionality to facilitate programmatic use of data and FRAMES metadata.'
        datePublished: '2018'
    PackageResult:
      type: object
      properties:
        id:
          type: string
          description: ESS-DIVE unique identifier
        dateUploaded:
          type: string
        dateModified:
          type: string
        isPublic:
          type: boolean
          description: Is this data package publicly accessible?
        citation:
          type: string
          description: The citation created from the data package metadata
        dataset:
           oneOf:
            - $ref: '#/components/schemas/Dataset'
            - $ref: '#/components/schemas/DatasetBrief'
      example:
        id: ess-dive-0f0348396e46261-20181022T131245032205
        dateUploaded: '2018-10-22T20:12:45.943Z'
        dateModified: '2018-10-22T20:12:45.943Z'
        isPublic: false
        citation: 'Hanson P J; Riggs J; Nettles C; Dorrance W; Hook L (2015): SPRUCE S1 Bog Environmental Monitoring Data: 2010-2016. SPRUCE. ess-dive-4e8327f43d8d148-20181107T222628174'
        dataset:
          '@id': null
          name: 'SPRUCE S1 Bog Environmental Monitoring Data: 2010-2016'
          description: 'This data set reports selected ambient environmental monitoring data from the S1 bog in Minnesota for the period June 2010 through December 2016. Measurements of the environmental conditions at these stations will serve as a pre-treatment baseline for experimental treatments and provide driver data for future modeling activities.  The site is the S1 bog, a Picea mariana [black spruce] – Sphagnum spp. bog forest in northern Minnesota, 40 km north of Grand Rapids, in the USDA Forest Service Marcell Experimental Forest (MEF). There are/were three monitoring sites located in the bog: Stations 1 and 2 are co-located at the southern end of the bog and Station 3 is located north central and adjacent to an existing U.S. Forest Service monitoring well.  There are eight data files with selected results of ambient environmental monitoring in the S1 bog for the period June 2010 through December 2016. One file has the  other seven have the available data for a given calendar year. Not all measurements started in June 2010 and EM3 measurements ended in May 2014.  Further details about the data package are in the attached pdf file (SPRUCE_EM_DATA_2010_2016_20170620).'
          datePublished: '2015'
    PackageCreate:
      type: object
      properties:
        id:
          type: string
          description: Unique ESS-DIVE identifier for the submitted data set
        detail:
          type: string
          description: A brief message about the status of your request
        errors:
          type: array
          items:
            type: string
          description: A detailed list of errors encountered. The data package is still created but some data files may have failed.
        dataset:
          $ref: '#/components/schemas/Dataset'
    PackagesResult:
      type: object
      properties:
        total:
          type: integer
          description: The total records returned by the query
        page_size:
          type: integer
          description: 'The requested result page size '
        row_start:
          type: integer
          description: The index that the search results start on
        user:
          type: string
          description: The user that performed the query
        result:
          type: array
          items:
            $ref: '#/components/schemas/PackageResult'
          description: The data packages returned by the query
      example:
        total: 100
        user: 'http://orcid.org/'
        page_size: 25
        row_start: 1
        result:
          - id: ess-dive-0f0348396e46261-20181022T131245032205
            dateUploaded: '2018-10-22T20:12:45.943Z'
            dateModified: '2018-10-22T20:12:45.943Z'
            isPublic: false
            citation: 'Hanson P J; Riggs J; Nettles C; Dorrance W; Hook L (2015): SPRUCE S1 Bog Environmental Monitoring Data: 2010-2016. SPRUCE. ess-dive-4e8327f43d8d148-20181107T222628174'
            dataset:
              '@id': null
              name: 'SPRUCE S1 Bog Environmental Monitoring Data: 2010-2016'
              description: 'This data set reports selected ambient environmental monitoring data from the S1 bog in Minnesota for the period June 2010 through December 2016. Measurements of the environmental conditions at these stations will serve as a pre-treatment baseline for experimental treatments and provide driver data for future modeling activities.  The site is the S1 bog, a Picea mariana [black spruce] – Sphagnum spp. bog forest in northern Minnesota, 40 km north of Grand Rapids, in the USDA Forest Service Marcell Experimental Forest (MEF). There are/were three monitoring sites located in the bog: Stations 1 and 2 are co-located at the southern end of the bog and Station 3 is located north central and adjacent to an existing U.S. Forest Service monitoring well.  There are eight data files with selected results of ambient environmental monitoring in the S1 bog for the period June 2010 through December 2016. One file has the  other seven have the available data for a given calendar year. Not all measurements started in June 2010 and EM3 measurements ended in May 2014.  Further details about the data package are in the attached pdf file (SPRUCE_EM_DATA_2010_2016_20170620).'
              datePublished: '2015'
    MessageModel:
      type: object
      properties:
        detail:
          type: string
      required:
        - detail
      example:
        detail: A message about the status code
    ErrorModel:
      type: object
      properties:
        detail:
          type: string
        errors:
          oneOf:
            - type: array
              items:
                type: string
      example:
        detail: An error occurred
        errors:
          - This is one reason for your error
          - This is another reason for your error
  responses:
    ValidationErrors:
      description: Bad Request.  There are validation errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageModel'
    DatasetBrief:
      description: An abbreviated Dataset
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DatasetBrief'
    PackageCreate:
      description: Package successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PackageCreate'
    UnauthorizedAccess:
      description: Unauthorized Access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageModel'
    MethodNotAllowed:
      description: Method Not Allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageModel'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageModel'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageModel'
  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerToken: []
